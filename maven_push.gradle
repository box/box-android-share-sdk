apply plugin: 'maven'
apply plugin: 'signing'

def isReleaseBuild() {
    return project.version.contains("SNAPSHOT") == false
}

def sonatypeRepositoryUrl
if (isReleaseBuild()) {
    sonatypeRepositoryUrl = hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL
            : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
} else {
    sonatypeRepositoryUrl = hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL
            : "https://oss.sonatype.org/content/repositories/snapshots"

}

def repositoryUsername = hasProperty('SONATYPE_USER') ? SONATYPE_USER : System.getenv('SONATYPE_USER');
def repositoryPassword = hasProperty('SONATYPE_PASS') ? SONATYPE_PASS : System.getenv('SONATYPE_PASS');

afterEvaluate { project ->
    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                pom.artifactId = POM_ARTIFACT_ID

                repository(url: sonatypeRepositoryUrl) {
                    authentication(userName: repositoryUsername, password: repositoryPassword)
                }

                pom.project {
                    name POM_NAME
                    packaging POM_PACKAGING
                    description "Box Android Share SDK"
                    url "https://github.com/box/box-android-share-sdk"

                    scm {
                        url "https://github.com/box/box-android-share-sdk"
                        connection "scm:git@github.com:box/box-android-share-sdk.git"
                    }

                    licenses {
                        license {
                            name "The Apache Software License, Version 2.0"
                            url "http://www.apache.org/licenses/LICENSE-2.0.txt"
                            distribution "repo"
                        }
                    }

                    developers {
                        developer {
                            id repositoryUsername
                            name "Box Android Team"
                        }
                    }
                }
            }
        }
    }

    signing {
        required { isReleaseBuild() && gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }

    task androidJavadocs(type: Javadoc) {
        source = android.sourceSets.main.java.srcDirs
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
        classpath += files(android.libraryVariants.collect { variant -> variant.javaCompile.classpath.files })
    }

    task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
        classifier = 'javadoc'
        //basename = artifact_id
        from androidJavadocs.destinationDir
    }

    task androidSourcesJar(type: Jar) {
        classifier = 'sources'
        //basename = artifact_id
        from android.sourceSets.main.java.srcDirs
    }

    artifacts {
        //archives packageReleaseJar
        archives androidSourcesJar
        archives androidJavadocsJar
    }
}
